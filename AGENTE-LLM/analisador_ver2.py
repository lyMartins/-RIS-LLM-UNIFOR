import os
import re
import json
import pandas as pd
import google.generativeai as genai
from dotenv import load_dotenv
from decimal import Decimal, InvalidOperation

# --- CONFIGURA√á√ÉO SEGURA DA API ---
load_dotenv()
api_key = os.getenv("GOOGLE_API_KEY")
if not api_key:
    raise ValueError("A vari√°vel GOOGLE_API_KEY n√£o foi encontrada. Verifique seu arquivo .env.")
genai.configure(api_key=api_key)

# --- FUN√á√ïES AUXILIARES ---
def formatar_valor_brl(valor_str: str) -> str:
    """Formata uma string de valor para o padr√£o monet√°rio brasileiro."""
    try:
        valor_limpo = re.sub(r'[^\d,]', '', str(valor_str)).replace(',', '.')
        valor_decimal = Decimal(valor_limpo)
        return f'{valor_decimal:,.2f}'.replace(',', 'X').replace('.', ',').replace('X', '.')
    except (InvalidOperation, TypeError):
        return valor_str


def enviar_prompt_para_bloco(texto_bloco: str) -> str:
    """Envia um bloco de decreto para o Gemini e retorna o JSON puro."""

    prompt = f"""
    Voc√™ √© um assistente especialista em an√°lise de decretos or√ßament√°rios municipais. 
    Seu objetivo √© extrair informa√ß√µes precisas de textos que podem conter ru√≠dos de OCR, m√∫ltiplas p√°ginas ou formata√ß√µes inconsistentes.
    Siga **rigorosamente** todas as instru√ß√µes abaixo.

    üßπ **Etapa 0 ‚Äì Limpeza e normaliza√ß√£o do texto**
    - Corrija erros comuns de OCR.
    - Remova s√≠mbolos estranhos, repeti√ß√µes e ru√≠dos como "(S)V", "VNISSV", "ASSHOV", etc.
    - Corrija separa√ß√µes indevidas de palavras.
    - Preserve apenas informa√ß√µes relacionadas a decretos, artigos e valores.

    ---

    ## üß© Etapa 1 ‚Äì Crit√©rios de sele√ß√£o de documentos:
    - Considere como **decreto** apenas textos que **come√ßam com "DECRETO"** seguido de **n√∫mero e data**.
    - O documento deve conter **obrigatoriamente os Artigos 1¬∫ e 2¬∫**.
    - Ignore textos que comecem com "LEI", "OF√çCIO" ou "OFICIO".

    ---

    ## üìã Etapa 2 ‚Äì Regras de interpreta√ß√£o dos artigos:
    - **Artigo 1¬∫:** 
      - Localiza o valor do cr√©dito adicional.
      - Termos como "Cr√©dito Suplementar", "Cr√©dito Adicional Suplementar", "Cr√©dito Adicional" e "Suplementar" devem ser normalizados para **"Cr√©ditos Suplementares"**.
    - **Artigo 2¬∫:** 
      - Indica a fonte de recurso.
      - Termos como "Anula√ß√£o Parcial", "Anula√ß√µes Parciais das Dota√ß√µes Or√ßament√°rias" e similares devem ser normalizados para **"Anula√ß√£o de Dota√ß√µes"**.
      - Pode conter fontes no caput ou detalhadas em incisos.

    ---

    ## üìä Etapa 3 ‚Äì Informa√ß√µes a extrair:
    ### **Quadro 1 ‚Äì Resumo dos decretos** 
    | Campo | Descri√ß√£o | 
    |--------|------------| | numero_decreto | N√∫mero do decreto (formato N/ANO) |
    | data_decreto | Data por extenso ou formato DD/MM/AAAA | 
    | valor_total | Valor do cr√©dito do Artigo 1¬∫, como n√∫mero float |
    | tipo_credito | Tipo de cr√©dito adicional ("Cr√©ditos Suplementares", "Cr√©ditos Especiais" ou "Cr√©ditos Extraordin√°rios") |
    | fonte_recurso | Fonte de recurso do cr√©dito (Artigo 2¬∫) | | codigo_fonte |
     C√≥digo de 10 d√≠gitos, apenas se a fonte for "Excesso de Arrecada√ß√£o". Caso contr√°rio, nulo. | 
    --- ### **Quadro 2 ‚Äì Detalhamento por fonte de recurso** Cada fonte de recurso mencionada deve ser listada separadamente. 
    | Campo | Descri√ß√£o | 
    |--------|------------| | numero_decreto | N√∫mero do decreto |
     | data_decreto | Data do decreto | 
     | valor_decreto | Valor correspondente a cada fonte | 
     | fonte_recurso | Nome da fonte (normalizado) | 
     --- 
     ### **Quadro 3 ‚Äì Foco em 'Excesso de Arrecada√ß√£o'** 
     Filtre **somente** decretos cuja fonte de recurso seja "Excesso de Arrecada√ß√£o". 
     | Campo | Descri√ß√£o | 
     |--------|------------| 
     | numero_decreto | N√∫mero do decreto | 
     | data_decreto | Data do decreto | 
     | fonte_recurso | Fonte de recurso | 
     | codigo_fonte | C√≥digo de 10 d√≠gitos conforme PORTARIA N¬∫ 710/2021 (formato XYYYZZZZ00) |

    ---

    ## üßæ Etapa 4 ‚Äì Formato de sa√≠da
    - Retorne **SOMENTE UM OBJETO JSON V√ÅLIDO**.
    - A raiz deve conter **"quadro1"**, **"quadro2"** e **"quadro3"**.
    - N√£o inclua texto fora do JSON.
    - N√∫meros no formato **float** com ponto decimal.

    <texto_decreto>
    {texto_bloco}
    </texto_decreto>
    """

    try:
        model = genai.GenerativeModel("models/gemini-pro-latest")
        response = model.generate_content(prompt)

        json_text = response.text.strip()
        json_text = re.sub(r"^```[jJ]?[sS]?[oO]?[nN]?", "", json_text).strip()
        json_text = re.sub(r"```$", "", json_text).strip()
        return json_text
    except Exception as e:
        print(f"‚ö†Ô∏è Erro na chamada da API do Gemini: {e}")
        return None


# --- L√ìGICA PRINCIPAL ---
if __name__ == "__main__":
    arquivo_alvo = "decretos_fortim.txt"
    with open(arquivo_alvo, "r", encoding="utf-8") as f:
        texto_completo = f.read()

    print(f"üî™ Fatiando o documento '{arquivo_alvo}' em blocos de decretos...")
    # Linha corrigida, que torna " Or√ßament√°rio" opcional
    padrao_split = r'\n(?=DECRETO(?: Or√ßament√°rio)? N¬∫)'    
    blocos_decretos = re.split(padrao_split, texto_completo, flags=re.IGNORECASE)
    print(f"   {len(blocos_decretos)} blocos encontrados.")

    quadro1_total, quadro2_total, quadro3_total = [], [], []

    for i, bloco in enumerate(blocos_decretos):
        if not bloco.strip() or "Art. 1¬∫" not in bloco or "Art. 2¬∫" not in bloco:
            continue

        print(f"\nüß† Analisando bloco {i + 1}/{len(blocos_decretos)}...")
        resposta_json_str = enviar_prompt_para_bloco(bloco)

        if resposta_json_str:
            try:
                dados = json.loads(resposta_json_str)
                if isinstance(dados, dict):
                    quadro1_total.extend(dados.get("quadro1", []))
                    quadro2_total.extend(dados.get("quadro2", []))
                    quadro3_total.extend(dados.get("quadro3", []))
                    print(f"   ‚úÖ Bloco {i + 1} processado com sucesso.")
                else:
                    print(f"   ‚ö†Ô∏è JSON retornado n√£o √© um objeto esperado.")
            except json.JSONDecodeError:
                print(f"   ‚ö†Ô∏è Bloco {i + 1} n√£o retornou um JSON v√°lido.")

    print("\n" + "=" * 80)
    print(f"üéâ Extra√ß√£o conclu√≠da!")
    print("=" * 80)

    # --- Montagem dos DataFrames ---
    if quadro1_total:
        quadro1_df = pd.DataFrame(quadro1_total)
        if 'valor_total' in quadro1_df.columns:
            quadro1_df['valor_total'] = quadro1_df['valor_total'].apply(formatar_valor_brl)
            quadro1_df.rename(columns={'valor_total': 'valor do decreto'}, inplace=True)
        quadro1_df.to_csv("quadro1.csv", index=False, sep=';', encoding='utf-8-sig')
        print(f" - quadro1ver2.csv ({len(quadro1_df)} registros) salvo.")

    if quadro3_total:
        quadro3_df = pd.DataFrame(quadro3_total)
        quadro3_df.to_csv("quadro3.csv", index=False, sep=';', encoding='utf-8-sig')
        print(f" - quadro3ver2.csv ({len(quadro3_df)} registros) salvo.")
