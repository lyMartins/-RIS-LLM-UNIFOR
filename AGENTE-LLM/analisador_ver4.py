# analisador.py (Vers√£o Definitiva com os 3 Quadros)

import os
import re
import json
import pandas as pd
import google.generativeai as genai
from dotenv import load_dotenv
from decimal import Decimal, InvalidOperation

# --- CONFIGURA√á√ÉO SEGURA DA API ---
load_dotenv()
api_key = os.getenv("GOOGLE_API_KEY")
if not api_key:
    raise ValueError("A vari√°vel GOOGLE_API_KEY n√£o foi encontrada. Verifique seu arquivo .env.")
genai.configure(api_key=api_key)


# --- FUN√á√ïES AUXILIARES ---
def formatar_valor_brl(valor_str: str) -> str:
    try:
        valor_limpo = re.sub(r'[^\d,]', '', str(valor_str)).replace(',', '.')
        valor_decimal = Decimal(valor_limpo)
        return f'{valor_decimal:,.2f}'.replace(',', 'X').replace('.', ',').replace('X', '.')
    except (InvalidOperation, TypeError):
        return valor_str


def enviar_prompt_para_bloco(texto_bloco: str) -> str:
    prompt = f"""
    Voc√™ √© um assistente especialista em an√°lise de decretos or√ßament√°rios municipais. 
    Seu objetivo √© extrair informa√ß√µes precisas de textos que podem conter ru√≠dos de OCR, m√∫ltiplas p√°ginas ou formata√ß√µes inconsistentes.
    Siga **rigorosamente** todas as instru√ß√µes abaixo.
    
    <texto_decreto>
    {texto_bloco}
    </texto_decreto>

    üßπ **Etapa 0 ‚Äì Limpeza e normaliza√ß√£o do texto**
    - Corrija erros comuns de OCR.
    - Remova s√≠mbolos estranhos, repeti√ß√µes e ru√≠dos como "(S)V", "VNISSV", "ASSHOV", etc.
    - Corrija separa√ß√µes indevidas de palavras.
    - Preserve apenas informa√ß√µes relacionadas a decretos, artigos e valores.

    ---

    ## üß© Etapa 1 ‚Äì Crit√©rios de sele√ß√£o de documentos:
    - Considere como **decreto** apenas textos que **come√ßam com "DECRETO"** seguido de **n√∫mero e data**.
    - O documento deve conter **obrigatoriamente os Artigos 1¬∫ e 2¬∫**.
    - Ignore textos que comecem com "LEI", "OF√çCIO" ou "OFICIO".

    ---

    ## üìã Etapa 2 ‚Äì Regras de interpreta√ß√£o dos artigos:
    - **Artigo 1¬∫:** 
      - Localiza o valor do cr√©dito adicional.
      - Termos como "Cr√©dito Suplementar", "Cr√©dito Adicional Suplementar", "Cr√©dito Adicional" e "Suplementar" devem ser normalizados para **"Cr√©ditos Suplementares"**.
    - **Artigo 2¬∫:** 
      - Indica a fonte de recurso.
      - Termos como "Anula√ß√£o Parcial", "Anula√ß√µes Parciais das Dota√ß√µes Or√ßament√°rias" e similares devem ser normalizados para **"Anula√ß√£o de Dota√ß√µes"**.
      - Pode conter fontes no caput ou detalhadas em incisos.

    ---

    ## üìä Etapa 3 ‚Äì Informa√ß√µes a extrair:
    ### **Quadro 1 ‚Äì Resumo dos decretos** 
    | Campo | Descri√ß√£o | 
    |--------|------------| | numero_decreto | N√∫mero do decreto (formato N/ANO) |
    | data_decreto | Data por extenso ou formato DD/MM/AAAA | 
    | valor_total | Valor do cr√©dito do Artigo 1¬∫, como n√∫mero float |
    | tipo_credito | Tipo de cr√©dito adicional ("Cr√©ditos Suplementares", "Cr√©ditos Especiais" ou "Cr√©ditos Extraordin√°rios") |
    | fonte_recurso | Fonte de recurso do cr√©dito (Artigo 2¬∫) | | codigo_fonte |
     C√≥digo de 10 d√≠gitos, apenas se a fonte for "Excesso de Arrecada√ß√£o". Caso contr√°rio, nulo. | 
    --- ### **Quadro 2 ‚Äì Detalhamento por fonte de recurso** Cada fonte de recurso mencionada deve ser listada separadamente. 
    | Campo | Descri√ß√£o | 
    |--------|------------| | numero_decreto | N√∫mero do decreto |
     | data_decreto | Data do decreto | 
     | valor_decreto | Valor correspondente a cada fonte | 
     | fonte_recurso | Nome da fonte (normalizado) | 
     --- 
     ### **Quadro 3 ‚Äì Foco em 'Excesso de Arrecada√ß√£o'** 
     Filtre **somente** decretos cuja fonte de recurso seja "Excesso de Arrecada√ß√£o". 
     | Campo | Descri√ß√£o | 
     |--------|------------| 
     | numero_decreto | N√∫mero do decreto | 
     | data_decreto | Data do decreto | 
     | fonte_recurso | Fonte de recurso | 
     | codigo_fonte | C√≥digo de 10 d√≠gitos conforme PORTARIA N¬∫ 710/2021 (formato XYYYZZZZ00) |

    ---

    ## üßæ Etapa 4 ‚Äì Formato de sa√≠da
    - Retorne **SOMENTE UM OBJETO JSON V√ÅLIDO**.
    - A raiz deve conter **"quadro1"**, **"quadro2"** e **"quadro3"**.
    - N√£o inclua texto fora do JSON.
    - N√∫meros no formato **float** com ponto decimal.
    """
    try:
        # ... (o resto da fun√ß√£o continua igual)
        model = genai.GenerativeModel("models/gemini-pro-latest")
        response = model.generate_content(prompt)
        json_text = response.text.strip().replace("```json", "").replace("```", "")
        return json_text
    except Exception as e:
        print(f"   ‚ö†Ô∏è Erro na chamada da API do Gemini: {e}")
        return None


# --- L√ìGICA PRINCIPAL ---
if __name__ == "__main__":
    arquivo_alvo = "decretos_hidrolandia4.txt"  # Voc√™ pode trocar para "fortim.txt" aqui
    try:
        with open(arquivo_alvo, "r", encoding="utf-8") as f:
            texto_completo = f.read()
    except FileNotFoundError:
        print(f"‚ùå ERRO FATAL: O arquivo '{arquivo_alvo}' n√£o foi encontrado. Verifique o nome e o local do arquivo.")
        exit()

    print(f"üî™ Fatiando o documento '{arquivo_alvo}' em blocos de decretos...")
    # Padr√£o flex√≠vel para Fortim ('DECRETO N¬∫.') e Hidrol√¢ndia ('Decreto Or√ßament√°rio N¬∫')
    padrao_split = r'\n(?=DECRETO(?: Or√ßament√°rio)?\s+N[¬∫¬∞]\.?)'

    blocos_decretos = re.split(padrao_split, texto_completo, flags=re.IGNORECASE)
    if not blocos_decretos[0].strip():
        blocos_decretos.pop(0)
    print(f"   {len(blocos_decretos)} blocos encontrados.")

    lista_final_decretos = []

    for i, bloco in enumerate(blocos_decretos):
        # Filtro de valida√ß√£o do bloco
        if not bloco.strip() or not re.search(r'Art\.\s*1[¬∫¬∞o]', bloco, re.IGNORECASE) or not re.search(
                r'Art\.\s*2[¬∫¬∞o]', bloco, re.IGNORECASE):
            continue

        print(f"\nüß† Analisando bloco {i + 1}/{len(blocos_decretos)}...")
        # Adicionamos "DECRETO " de volta para dar contexto ao LLM, j√° que o split removeu
        resposta_json_str = enviar_prompt_para_bloco("DECRETO " + bloco)

        try:
            dados = json.loads(resposta_json_str)
            if "quadro1" in dados and isinstance(dados["quadro1"], list) and len(dados["quadro1"]) > 0:
                lista_final_decretos.extend(dados["quadro1"])  # Pega os dados de 'quadro1'
                print(f"   ‚úÖ Decreto(s) extra√≠do(s) com sucesso.")
            else:
                # Atualizamos a mensagem de erro para refletir a nova l√≥gica
                print(f"   ‚ö†Ô∏è  Bloco {i + 1} retornou um JSON v√°lido, mas est√° vazio ou sem a chave 'quadro1'.")
                print(
                    f"   ----------- RESPOSTA BRUTA DO MODELO -----------\n{resposta_json_str}\n   --------------------------------------------")
        except json.JSONDecodeError:
                # O texto retornado n√£o √© um JSON v√°lido
                print(f"   ‚ö†Ô∏è  Bloco {i + 1} n√£o retornou um JSON v√°lido.")
                print(
                    f"   ----------- RESPOSTA BRUTA DO MODELO -----------\n{resposta_json_str}\n   --------------------------------------------")

    print("\n" + "=" * 80)
    print(f"üéâ An√°lise de todos os blocos conclu√≠da! Total de {len(lista_final_decretos)} decretos extra√≠dos.")
    print("=" * 80)

    if lista_final_decretos:
        # --- Montagem e salvamento dos Quadros ---
        # (Esta parte permanece a mesma, pois a l√≥gica de cria√ß√£o das tabelas est√° correta)
        q1_linhas, q2_linhas, q3_linhas = [], [], []

        for dec in lista_final_decretos:
            fontes = dec.get('fontes', [])
            nomes_fontes = sorted(list(set([f.get('nome_da_fonte') for f in fontes if f.get('nome_da_fonte')])))

            q1_linhas.append({
                "n√∫mero do decreto": dec.get('numero_decreto'),
                "data do decreto": dec.get('data_decreto'),
                "valor do decreto": formatar_valor_brl(dec.get('valor_total')),
                "Tipo de Cr√©dito Adicional": dec.get('tipo_credito'),
                "fonte de recurso do cr√©dito adicional": ", ".join(nomes_fontes)
            })

            if len(fontes) > 1:
                for fonte in fontes:
                    q2_linhas.append({
                        "n√∫mero do decreto": dec.get('numero_decreto'),
                        "data do decreto": dec.get('data_decreto'),
                        "valor do cr√©dito adicional para cada fonte de recurso": formatar_valor_brl(
                            fonte.get('valor_da_fonte')),
                        "fonte de recurso do cr√©dito adicional": fonte.get('nome_da_fonte')
                    })

            for fonte in fontes:
                if fonte.get('nome_da_fonte') == "Excesso de Arrecada√ß√£o":
                    q3_linhas.append({
                        "n√∫mero do decreto": dec.get('numero_decreto'),
                        "data do decreto": dec.get('data_decreto'),
                        "fonte de recurso do cr√©dito adicional": fonte.get('nome_da_fonte'),
                        "c√≥digo da fonte": fonte.get('codigo_fonte') or 'N√£o encontrado'
                    })

        quadro1_df = pd.DataFrame(q1_linhas);
        quadro2_df = pd.DataFrame(q2_linhas);
        quadro3_df = pd.DataFrame(q3_linhas)
        quadro1_df.to_csv("quadro1ver4.csv", index=False, sep=';', encoding='utf-8-sig')
        quadro2_df.to_csv("quadro2ver4.csv", index=False, sep=';', encoding='utf-8-sig')
        quadro3_df.to_csv("quadro3ver4.csv", index=False, sep=';', encoding='utf-8-sig')

        print("\n‚úÖ Extra√ß√£o finalizada. Quadros salvos como CSV:")
        print(f" - quadro1.csv ({len(quadro1_df)} registros)")
        print(f" - quadro2.csv ({len(quadro2_df)} registros)")
        print(f" - quadro3.csv ({len(quadro3_df)} registros)")