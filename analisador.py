import json
import os
import pandas as pd
import google.generativeai as genai
from dotenv import load_dotenv

# --- Configura√ß√µes Seguras ---
# 1. Carrega as vari√°veis de ambiente do arquivo .env
load_dotenv()

# 2. Configura a API usando a chave carregada do ambiente
# A biblioteca vai procurar automaticamente pela vari√°vel GOOGLE_API_KEY
api_key = os.getenv("GOOGLE_API_KEY")
if not api_key:
    raise ValueError("A vari√°vel GOOGLE_API_KEY n√£o foi encontrada. Verifique seu arquivo .env.")
genai.configure(api_key=api_key)

ARQUIVO_DECRETOS = "decretos_fortim.txt"


# Fun√ß√£o para enviar prompt ao Gemini (usando a API moderna)
def enviar_prompt(texto_do_documento: str) -> str:
    # O seu prompt, mantido exatamente como voc√™ escreveu, pois est√° perfeito.
    prompt = f"""
    Voc√™ √© um assistente especialista em an√°lise de decretos or√ßament√°rios municipais. Seu objetivo √© extrair informa√ß√µes precisas de textos que podem conter ru√≠dos, documentos em m√∫ltiplas p√°ginas, ou formatos variados. Siga estas instru√ß√µes rigorosamente.

    <texto_documento>
    {texto_do_documento}
    </texto_documento>

    Com base no texto acima, extraia as seguintes informa√ß√µes:

    1Ô∏è‚É£ **Crit√©rios de sele√ß√£o de documentos**:
    - Considere como 'decreto' apenas os documentos que come√ßam com a palavra "DECRETO" seguida de n√∫mero e data.
    - O decreto deve conter obrigatoriamente os Artigos Primeiro e Segundo.
    - Ignore qualquer documento que comece com "LEI", "OF√çCIO" ou "OFICIO".

    2Ô∏è‚É£ **Informa√ß√µes a extrair**:
    - "numero_decreto": N√∫mero do decreto.
    - "data_decreto": Data do decreto.
    - "valor_decreto": Valor do cr√©dito adicional (extraia do Artigo 1¬∫).
    - "tipo_credito": Tipo de cr√©dito adicional ("Cr√©ditos Suplementares", "Cr√©ditos Especiais" ou "Cr√©ditos Extraordin√°rios").
    - "fonte_recurso": Fonte de recurso do cr√©dito adicional (do Artigo 2¬∫). Poss√≠veis valores: "Super√°vit Financeiro", "Excesso de Arrecada√ß√£o", "Anula√ß√£o de Dota√ß√µes" e/ou "Opera√ß√µes de Cr√©dito".
    - "codigo_fonte": Se a fonte for "Excesso de Arrecada√ß√£o", extraia o c√≥digo de 10 d√≠gitos associado.

    3Ô∏è‚É£ **Regras de interpreta√ß√£o**:
    - Artigo 1¬∫: 'Cr√©dito Suplementar', 'Cr√©dito Adicional Suplementar', etc., devem ser "Cr√©ditos Suplementares".
    - Artigo 2¬∫: 'Anula√ß√£o de Dota√ß√µes', 'Anula√ß√µes Parciais...', etc., devem ser "Anula√ß√£o de Dota√ß√µes".

    4Ô∏è‚É£ **Formato de sa√≠da**:
    - Retorne **somente um √∫nico objeto JSON v√°lido**. A raiz do objeto deve conter uma chave "decretos", que √© uma lista de todos os decretos encontrados.
    - Cada item na lista "decretos" deve ser um objeto JSON com as informa√ß√µes extra√≠das.
    - Exemplo de objeto JSON:
    ```json
    {{
      "decretos": [
        {{
          "numero_decreto": "08/2023",
          "data_decreto": "1 de Agosto de 2023",
          "valor_decreto": "2.041.680,00",
          "tipo_credito": "Cr√©ditos Suplementares",
          "fonte_recurso": "Anula√ß√£o de Dota√ß√µes",
          "codigo_fonte": null
        }}
      ]
    }}
    ```
    """

    # Usando a API moderna: GenerativeModel e generate_content
    model = genai.GenerativeModel('gemini-pro-latest')  # Ou o modelo que preferir da sua lista
    response = model.generate_content(prompt)

    # Limpa a sa√≠da do modelo para garantir que √© apenas o JSON
    json_text = response.text.strip().replace("```json", "").replace("```", "")
    return json_text


# Fun√ß√£o para carregar e limpar JSON (sem altera√ß√µes)
def parse_json(json_text):
    try:
        return json.loads(json_text)
    except json.JSONDecodeError as e:
        print(f"‚ùå Erro ao converter JSON: {e}")
        print(f"   Texto recebido do modelo:\n{json_text}")
        return None


# -------- L√≥gica principal --------
if __name__ == "__main__":
    with open(ARQUIVO_DECRETOS, "r", encoding="utf-8") as f:
        texto = f.read()

    print("üß† Enviando texto para an√°lise do Gemini...")
    resposta_json = enviar_prompt(texto)

    if not resposta_json:
        print("‚ùå O modelo n√£o retornou uma resposta.")
        exit(1)

    parsed = parse_json(resposta_json)
    if parsed is None or "decretos" not in parsed:
        print("‚ùå A resposta do modelo n√£o continha a estrutura JSON esperada (chave 'decretos').")
        exit(1)

    # Transformar os dados em DataFrames
    todos_decretos = parsed.get("decretos", [])

    quadro1 = pd.DataFrame(todos_decretos)

    # L√≥gica para Quadro 2 (M√∫ltiplas Fontes) - Se necess√°rio no futuro
    # quadro2 = ...

    # L√≥gica para Quadro 3 (Excesso de Arrecada√ß√£o)
    quadro3 = quadro1[quadro1['fonte_recurso'] == 'Excesso de Arrecada√ß√£o'].copy()

    # Salvar os DataFrames em arquivos CSV
    quadro1.to_csv("quadro1.csv", index=False, sep=';', encoding='utf-8-sig')
    quadro3.to_csv("quadro3.csv", index=False, sep=';', encoding='utf-8-sig')

    print("‚úÖ Extra√ß√£o conclu√≠da. Quadros salvos como CSV:")
    print(f" - quadro1ver1.csv ({len(quadro1)} registros)")
    print(f" - quadro3ver1.csv ({len(quadro3)} registros)")